link(rel="import", href="bower_components/polymer/polymer.html")
link(rel="import", href="polymer-date-picker-calendar.html")
link(rel="import", href="polymer-date-picker-positioning.html")

script(src="bower_components/moment/min/moment.min.js")
script(src="bower_components/moment-timezone/builds/moment-timezone-with-data.min.js")

polymer-element(name="polymer-date-picker", extends="polymer-date-picker-positioning", attributes="range selectedDate startDate endDate opened halign relatedTarget selected showRanges timezone")
  template
    link(rel="stylesheet" href="polymer-date-picker.css")
    div(id="target" class="daterangepicker opensright")
      template(if="{{range != null}}")
        div(class="ranges" hidden?="{{!showRanges}}")
          ul(on-click="{{rangeSelected}}")
            template(repeat="{{ r in range }}")
              li(data-id="{{ r.id }}" data-type="{{ r.type }}" data-period-start="{{ r.substractStart }}" data-period-end="{{ r.subtractEnd }}" class="{{ {active: (selected == r.id) } | tokenList }}") {{r.label}}
        polymer-date-picker-calendar(start startDate="{{startDate}}" endDate="{{endDate}}" hidden?="{{selected != 'custom'}}")
        polymer-date-picker-calendar(end startDate="{{startDate}}" endDate="{{endDate}}" hidden?="{{selected != 'custom'}}")
      template(if="{{range == null}}")
        polymer-date-picker-calendar(selectedDate="{{selectedDate}}")

  script.
    Polymer("polymer-date-picker", {
      halign: 'middle',
      selected: "",
      ready: function() {
        this.target = this.$.target;

        this.showRanges = 'showRanges' in this.attributes;
        if(!('timezone' in this.attributes))  {
          this.timezone = 'America/New_York';
        }

        if ('range' in this.attributes) {
          console.log('range', this.attributes['range'].value);

          this.range = [{
            id: 'today',
            label: 'Today'
          }, {
            id: 'yesterday',
            type: 'days',
            label: 'Yesterday',
            substractStart: 1,
            subtractEnd: 1
          }, {
            id: 'last7Days',
            type: 'days',
            label: 'Last 7 Days',
            substractStart: 6
          }, {
            id: 'last30Days',
            type: 'days',
            label: 'Last 30 Days',
            substractStart: 30
          }, {
            id: 'thisMonth',
            type: 'months',
            label: 'This Month'
          }, {
            id: 'lastMonth',
            type: 'months',
            label: 'Last Month',
            substractStart: 1,
            subtractEnd: 1
          }, {
            id: 'custom',
            label: 'Custom'
          }]
        }

        this.super();
      },
      close: function() {
        this.opened = false;
      },
      newMoment: function() {
        if (this.timezone) return moment().tz(this.timezone);
        else return moment();
      },
      rangeSelected: function (event) {
        var target = event.target;

        var id = target.attributes['data-id'].value,
            type = target.attributes['data-type'].value,
            substractStart = 'data-period-start' in target.attributes ? ~~target.attributes['data-period-start'].value : 0,
            subtractEnd = 'data-period-end' in target.attributes ? ~~target.attributes['data-period-end'].value : 0;

        this.startDate = this.newMoment();
        this.endDate = this.newMoment();

        if (substractStart) {
          this.startDate = this.startDate.subtract(substractStart, type);
          if (subtractEnd) {
            this.endDate = this.endDate.subtract(subtractEnd, type);
          }
        }

        if (type === 'months') {
          this.startDate = this.startDate.startOf('month');
          this.endDate = this.endDate.endOf('month');
        }

        this.startDate = this.format(this.startDate);
        this.endDate = this.format(this.endDate);

        this.selected = id;
        if ('custom' !== id) {
          this.close();
        }
      },
      format: function(moment) {
        return moment.format("YYYY-MM-DD");
      }
    });